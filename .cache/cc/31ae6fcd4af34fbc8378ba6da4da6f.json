{"id":"js/shaders/fragment.glsl","dependencies":[{"name":"/Users/valderrama/projects/webGL/project/package.json","includedInParent":true,"mtime":1626831765381}],"generated":{"js":"module.exports = \"#define GLSLIFY 1\\nuniform float time;\\nuniform float uProgress;\\nuniform vec2 uTextureSize;\\nuniform sampler2D uTexture;\\n\\nvarying float pulse;\\n\\nvarying vec2 vUv;\\nvarying vec3 vNormal;\\n\\nvarying vec2 vSize;\\n\\nuniform vec4 uCorners;\\n\\nvec2 getUV(vec2 uv, vec2 textureSize, vec2 quadSize){\\n    vec2 tempUV = uv - vec2(0.5);\\n\\n    float quadAspect =  quadSize.x/quadSize.y;\\n    float textureAspect =  textureSize.x/textureSize.y;\\n    if(quadAspect<textureAspect){\\n        tempUV = tempUV*vec2(quadAspect/textureAspect, 1.);\\n    }else{\\n        tempUV = tempUV*vec2(1., textureAspect/quadAspect);\\n    }\\n\\n    tempUV += vec2(0.5);\\n    return tempUV;\\n}\\n\\nvoid main(){\\n    // vec2 newUV = (vUv - vec2(0.5))*vec2(2.,1.). + vec2(0.5);\\n\\n    // vec4 myimage = texture(\\n    //     uTexture,\\n    //     vUv + 0.01*sin(vUv * 20. + time)\\n    //     );\\n    vec2 correctUV = getUV(vUv, uTextureSize, vSize);\\n\\n    vec4 image = texture(uTexture, correctUV);    \\n\\n    // float sinePulse = (1. + sin(vUv.x * 50. - time))*0.5;\\n    // gl_FragColor = vec4 ( vUv, 0.0, 1.0 );\\n    // gl_FragColor = vec4 ( sinePulse, 0.,0.0, 1.0 );\\n    gl_FragColor = image;\\n    // gl_FragColor = vec4(vNormal, 1.);\\n    // gl_FragColor = vec4(vNormal, 0.5 * (pulse + 1.));\\n\\n    // gl_FragColor = vec4(0., 0.5 * (pulse + 1.), 0., 1.);\\n\\n    // gl_FragColor = vec4(uProgress, 0., 0., 1.);\\n\\n}\";"},"sourceMaps":{"js":{"mappings":[{"name":"module","generated":{"line":1,"column":0},"source":"js/shaders/fragment.glsl","original":{"line":1,"column":0}},{"generated":{"line":1,"column":6},"source":"js/shaders/fragment.glsl","original":{"line":1,"column":6}},{"name":"exports","generated":{"line":1,"column":7},"source":"js/shaders/fragment.glsl","original":{"line":1,"column":7}},{"generated":{"line":1,"column":14},"source":"js/shaders/fragment.glsl","original":{"line":1,"column":0}},{"generated":{"line":1,"column":17},"source":"js/shaders/fragment.glsl","original":{"line":1,"column":15}},{"generated":{"line":1,"column":1405},"source":"js/shaders/fragment.glsl","original":{"line":1,"column":0}}],"sources":{"js/shaders/fragment.glsl":"module.exports=\"#define GLSLIFY 1\\nuniform float time;\\nuniform float uProgress;\\nuniform vec2 uTextureSize;\\nuniform sampler2D uTexture;\\n\\nvarying float pulse;\\n\\nvarying vec2 vUv;\\nvarying vec3 vNormal;\\n\\nvarying vec2 vSize;\\n\\nuniform vec4 uCorners;\\n\\nvec2 getUV(vec2 uv, vec2 textureSize, vec2 quadSize){\\n    vec2 tempUV = uv - vec2(0.5);\\n\\n    float quadAspect =  quadSize.x/quadSize.y;\\n    float textureAspect =  textureSize.x/textureSize.y;\\n    if(quadAspect<textureAspect){\\n        tempUV = tempUV*vec2(quadAspect/textureAspect, 1.);\\n    }else{\\n        tempUV = tempUV*vec2(1., textureAspect/quadAspect);\\n    }\\n\\n    tempUV += vec2(0.5);\\n    return tempUV;\\n}\\n\\nvoid main(){\\n    // vec2 newUV = (vUv - vec2(0.5))*vec2(2.,1.). + vec2(0.5);\\n\\n    // vec4 myimage = texture(\\n    //     uTexture,\\n    //     vUv + 0.01*sin(vUv * 20. + time)\\n    //     );\\n    vec2 correctUV = getUV(vUv, uTextureSize, vSize);\\n\\n    vec4 image = texture(uTexture, correctUV);    \\n\\n    // float sinePulse = (1. + sin(vUv.x * 50. - time))*0.5;\\n    // gl_FragColor = vec4 ( vUv, 0.0, 1.0 );\\n    // gl_FragColor = vec4 ( sinePulse, 0.,0.0, 1.0 );\\n    gl_FragColor = image;\\n    // gl_FragColor = vec4(vNormal, 1.);\\n    // gl_FragColor = vec4(vNormal, 0.5 * (pulse + 1.));\\n\\n    // gl_FragColor = vec4(0., 0.5 * (pulse + 1.), 0., 1.);\\n\\n    // gl_FragColor = vec4(uProgress, 0., 0., 1.);\\n\\n}\";"},"lineCount":null}},"error":null,"hash":"a7df292df73de241fac3ec7730ffc8f3","cacheData":{"env":{}}}